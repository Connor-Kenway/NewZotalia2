import { api } from './index';

//location format example
const location = {"state":"Wyoming",
    "city":"Streichside",
    "address":"936 E 8th Street",
    "zipcode":"82379"}

//still working on this
const payment_details = {}

//status of the gig
const status = {
    "draft": "draft",//draft means the gig posting is not published and the client is still editing it
    "open": "open",//means the gig is open and people can apply to it
    "in_progress": "in_progress", //in progress means someone has accepted the gig and is working on it
    "completed": "completed", //means the gig has been completed by the gig worker
}

export class GigProfile {
    constructor(title, description, location, 
        payment_details, status, start_date, 
        end_date, is_published,
        client_id) {
    //gig_id auto-generated by supabase
    this.created_at = new Date().toISOString();
    this.title = title;
    this.description = description;
    this.location = location;
    this.payment_details = payment_details;
    this.status = status;
    this.start_date = start_date
    this.end_date = end_date
    this.is_published = is_published //bool
    this.notification_threashold = 10, //don't worry about this field
    this.review = null  //dont' worry about this field for now but will be used to see if the applicaion has been revieweed
    this.client_id = client_id
    }
}

export const gigSetup = async (data) => {
    try {
        console.log(data);
        const gigProfile = new GigProfile(
            data.title,
            data.description,
            data.location,
            data.payment_details,
            data.status,
            data.start_date,
            data.end_date,
            data.is_published,
            data.client_id
        );

        console.log('Gig Profile:', gigSetup);

        const response = await api.post('/gigs/', gigSetup);
        console.log(response);
        console.log('after response');
        return response.data;
    } catch (error) {
        console.error('Failed to set up gig profile:', error);
        return { success: false, message: 'Failed to set up gig profile', error: error.message };
    }
}
//the code below is the proper format. ignore the types
// const testGig: Omit<Tables<'gig'>, 'gig_id' | 'created_at'> = {
//     title: "Test Gig to Delete",
//     description: "This is a test gig",
//     category: "UI/UX",
//     location: {
//         is_remote: true,
//         location: {
//             state: "Test State",
//             city: "Test City",
//             address: "123 Test St"
//         }
//     },
//     payment_details: {
//         rate: 100,
//         type: "hourly"
//     },
//     status: "draft",
//     start_date: new Date().toISOString().split('T')[0],
//     end_date: new Date().toISOString().split('T')[0],
//     is_published: false,
//     notification_threashold: 26,
//     review: 'na at the time',
//     client_id: '01210e7c-915a-4af7-b933-969e6b0101d3',

// };

export const fetchGigs = async () => {
    try {
        console.log('in fetching gigs')
        const response = await api.get('/gigs/');
        console.log(response);
        return response.data;
    }
    catch (error) {
        console.error('Failed to fetch gigs:', error);
        return { success: false, message: 'Failed to fetch gigs', error: error.message };
    }
}

//might not need this if we pass back the entire gig information from the list of gigs view to the individual gig view
export const fetchGigDetails = async (gigId) => {
    try {
     
      const response = await api.get(`/gigs/${gigId}`);
      return response.data;
    } catch (error) {
      console.error('Failed to fetch gig details:', error);
      return { success: false, message: 'Failed to fetch gig details', error: error.message };
    }
  };